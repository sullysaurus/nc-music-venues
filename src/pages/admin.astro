---
import { loadVenues } from '../lib/venues';
import fs from 'fs';
import path from 'path';

const venues = loadVenues();
const totalVenues = venues.length;

// Calculate statistics for all scraped fields
const venuesWithEmail = venues.filter(v => v.contact_email && v.contact_email.trim()).length;
const venuesWithPhone = venues.filter(v => v.contact_phone && v.contact_phone.trim()).length;
const venuesWithCapacity = venues.filter(v => v.capacity && v.capacity.toString().trim()).length;
const venuesWithGenres = venues.filter(v => v.typical_genres && v.typical_genres.trim()).length;
const venuesWithContactName = venues.filter(v => v.contact_name && v.contact_name.trim()).length;

const venuesWithWebsite = venues.filter(v => v.website && v.website.trim()).length;
const venuesWithoutWebsite = venues.filter(v => !v.website || !v.website.trim()).length;

// Calculate completion percentages
const emailPercentage = (venuesWithEmail / totalVenues * 100).toFixed(1);
const phonePercentage = (venuesWithPhone / totalVenues * 100).toFixed(1);
const capacityPercentage = (venuesWithCapacity / totalVenues * 100).toFixed(1);
const genrePercentage = (venuesWithGenres / totalVenues * 100).toFixed(1);
const contactNamePercentage = (venuesWithContactName / totalVenues * 100).toFixed(1);

// Calculate venues needing scraping (have website but missing any info)
const venuesNeedingScraping = venues.filter(v => 
  v.website && v.website.trim() && 
  (!v.contact_email || !v.contact_phone || !v.capacity || !v.typical_genres || !v.contact_name)
).length;

// Read scraper log if it exists
let scraperLog = '';
const logPath = path.join(process.cwd(), 'logs/scraper.log');
try {
  if (fs.existsSync(logPath)) {
    const logContent = fs.readFileSync(logPath, 'utf8');
    scraperLog = logContent.split('\n').slice(-20).join('\n'); // Last 20 lines
  }
} catch (error) {
  scraperLog = 'No log file found';
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Venue Directory Admin</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        font-family: system-ui, -apple-system, sans-serif;
        line-height: 1.6;
        color: #333;
        background: #f8fafc;
        padding: 2rem;
      }
      
      .container {
        max-width: 1000px;
        margin: 0 auto;
      }
      
      .header {
        text-align: center;
        margin-bottom: 2rem;
      }
      
      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
      }
      
      .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
      }
      
      .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #3b82f6;
      }
      
      .stat-label {
        color: #6b7280;
        margin-top: 0.5rem;
      }
      
      .progress-bar {
        width: 100%;
        height: 20px;
        background: #e5e7eb;
        border-radius: 10px;
        overflow: hidden;
        margin: 1rem 0;
      }
      
      .progress-fill {
        height: 100%;
        background: #10b981;
        transition: width 0.3s ease;
      }
      
      .log-section {
        background: white;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
      }
      
      .log-content {
        background: #1f2937;
        color: #f9fafb;
        padding: 1rem;
        border-radius: 0.25rem;
        font-family: 'Monaco', 'Menlo', monospace;
        font-size: 0.875rem;
        white-space: pre-wrap;
        max-height: 300px;
        overflow-y: auto;
      }
      
      .actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-bottom: 2rem;
      }
      
      .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 0.5rem;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
      }
      
      .btn-primary {
        background: #3b82f6;
        color: white;
      }
      
      .btn-secondary {
        background: #6b7280;
        color: white;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>Venue Directory Admin</h1>
        <p>Monitor comprehensive venue data scraping: emails, phone numbers, capacity, music genres, and contact names</p>
      </div>
      
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number">{totalVenues}</div>
          <div class="stat-label">Total Venues</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesWithWebsite}</div>
          <div class="stat-label">With Website</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesNeedingScraping}</div>
          <div class="stat-label">Need Scraping</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesWithEmail}</div>
          <div class="stat-label">With Email</div>
          <div style="font-size: 0.875rem; color: #10b981; margin-top: 0.25rem;">{emailPercentage}%</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesWithPhone}</div>
          <div class="stat-label">With Phone</div>
          <div style="font-size: 0.875rem; color: #10b981; margin-top: 0.25rem;">{phonePercentage}%</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesWithCapacity}</div>
          <div class="stat-label">With Capacity</div>
          <div style="font-size: 0.875rem; color: #10b981; margin-top: 0.25rem;">{capacityPercentage}%</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesWithGenres}</div>
          <div class="stat-label">With Genres</div>
          <div style="font-size: 0.875rem; color: #10b981; margin-top: 0.25rem;">{genrePercentage}%</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-number">{venuesWithContactName}</div>
          <div class="stat-label">With Contact Name</div>
          <div style="font-size: 0.875rem; color: #10b981; margin-top: 0.25rem;">{contactNamePercentage}%</div>
        </div>
      </div>
      
      <div class="log-section">
        <h2>Scraping Progress Overview</h2>
        
        <div style="margin-bottom: 1rem;">
          <h3 style="margin-bottom: 0.5rem; color: #3b82f6;">Email Addresses</h3>
          <div class="progress-bar">
            <div class="progress-fill" style={`width: ${emailPercentage}%`}></div>
          </div>
          <p>{emailPercentage}% complete ({venuesWithEmail}/{totalVenues})</p>
        </div>
        
        <div style="margin-bottom: 1rem;">
          <h3 style="margin-bottom: 0.5rem; color: #3b82f6;">Phone Numbers</h3>
          <div class="progress-bar">
            <div class="progress-fill" style={`width: ${phonePercentage}%`}></div>
          </div>
          <p>{phonePercentage}% complete ({venuesWithPhone}/{totalVenues})</p>
        </div>
        
        <div style="margin-bottom: 1rem;">
          <h3 style="margin-bottom: 0.5rem; color: #3b82f6;">Capacity Information</h3>
          <div class="progress-bar">
            <div class="progress-fill" style={`width: ${capacityPercentage}%`}></div>
          </div>
          <p>{capacityPercentage}% complete ({venuesWithCapacity}/{totalVenues})</p>
        </div>
        
        <div style="margin-bottom: 1rem;">
          <h3 style="margin-bottom: 0.5rem; color: #3b82f6;">Music Genres</h3>
          <div class="progress-bar">
            <div class="progress-fill" style={`width: ${genrePercentage}%`}></div>
          </div>
          <p>{genrePercentage}% complete ({venuesWithGenres}/{totalVenues})</p>
        </div>
        
        <div style="margin-bottom: 1rem;">
          <h3 style="margin-bottom: 0.5rem; color: #3b82f6;">Contact Names</h3>
          <div class="progress-bar">
            <div class="progress-fill" style={`width: ${contactNamePercentage}%`}></div>
          </div>
          <p>{contactNamePercentage}% complete ({venuesWithContactName}/{totalVenues})</p>
        </div>
      </div>
      
      <div class="log-section">
        <h2>Upload Venues</h2>
        <p style="margin-bottom: 1rem; color: #6b7280;">Upload a CSV file to add new venues to the directory.</p>
        
        <div style="margin-bottom: 1rem;">
          <input type="file" id="csvFileInput" accept=".csv" style="margin-right: 1rem;" />
          <button class="btn btn-primary" id="uploadBtn">Upload CSV</button>
        </div>
        
        <div style="font-size: 0.875rem; color: #6b7280; margin-bottom: 1rem;">
          <strong>Required CSV columns:</strong> name, location, address, venue_type, website<br/>
          <strong>Optional columns:</strong> capacity, contact_email, contact_phone, contact_name, typical_genres
        </div>
        
        <div id="uploadStatus" style="display: none; margin-top: 1rem;"></div>
      </div>
      
      <div class="actions">
        <button class="btn btn-primary" id="scraperBtn">Run Complete Scraper</button>
        <a href="/admin/discovery" class="btn btn-secondary">Venue Discovery</a>
        <a href="/" class="btn btn-secondary">Back to Directory</a>
      </div>
      
      <div class="log-section">
        <h2>Recent Scraper Activity</h2>
        <div class="log-content">{scraperLog || 'No recent activity'}</div>
      </div>
    </div>
    
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const scraperBtn = document.getElementById('scraperBtn');
        const uploadBtn = document.getElementById('uploadBtn');
        const csvFileInput = document.getElementById('csvFileInput');
        const uploadStatus = document.getElementById('uploadStatus');
        
        scraperBtn.addEventListener('click', async function() {
          const btn = this;
          btn.disabled = true;
          btn.textContent = 'Running...';
          
          try {
            const response = await fetch('/.netlify/functions/run-scraper', { method: 'POST' });
            const result = await response.text();
            alert(result || 'Scraper started successfully');
          } catch (error) {
            alert('Error starting scraper: ' + error.message);
          } finally {
            btn.disabled = false;
            btn.textContent = 'Run Complete Scraper';
            
            // Refresh page after 2 seconds
            setTimeout(() => location.reload(), 2000);
          }
        });
        
        uploadBtn.addEventListener('click', async function() {
          const file = csvFileInput.files[0];
          
          if (!file) {
            alert('Please select a CSV file to upload');
            return;
          }
          
          if (!file.name.toLowerCase().endsWith('.csv')) {
            alert('Please select a CSV file');
            return;
          }
          
          const btn = this;
          btn.disabled = true;
          btn.textContent = 'Uploading...';
          uploadStatus.style.display = 'none';
          
          try {
            // Read file content
            const fileContent = await readFileAsText(file);
            
            // Send to Netlify function
            const response = await fetch('/.netlify/functions/upload-venues', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ csvContent: fileContent })
            });
            
            const result = await response.json();
            
            // Display result
            let statusHtml = `
              <div style="padding: 1rem; border-radius: 0.5rem; ${response.ok ? 'background: #d1fae5; color: #065f46;' : 'background: #fee2e2; color: #991b1b;'}">
                <strong>${response.ok ? 'Success:' : 'Error:'}</strong> ${result.message}
                ${result.venuesAdded ? `<br/>Found ${result.venuesAdded} new venues to add.` : ''}
                ${result.duplicates ? `<br/>${result.duplicates} duplicates were skipped.` : ''}
                ${result.totalProcessed ? `<br/>Total processed: ${result.totalProcessed} venues` : ''}
              </div>
            `;
            
            // If there's CSV data to copy (serverless mode)
            if (result.csvData && result.venuesAdded > 0) {
              statusHtml += `
                <div style="margin-top: 1rem; padding: 1rem; background: #f3f4f6; border-radius: 0.5rem;">
                  <strong>Manual Update Required:</strong><br/>
                  Since this is a serverless environment, the venues cannot be automatically added to your file.<br/>
                  <button onclick="copyNewVenuesData('${result.csvData.replace(/'/g, "\\'")}')" 
                          style="margin-top: 0.5rem; background: #3b82f6; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer;">
                    Copy New Venues CSV Data
                  </button>
                </div>
              `;
            }
            
            uploadStatus.innerHTML = statusHtml;
            uploadStatus.style.display = 'block';
            
            if (response.ok && result.venuesAdded > 0) {
              // Refresh page after success to show updated stats
              setTimeout(() => location.reload(), 3000);
            }
            
          } catch (error) {
            uploadStatus.innerHTML = `
              <div style="padding: 1rem; border-radius: 0.5rem; background: #fee2e2; color: #991b1b;">
                <strong>Error:</strong> ${error.message}
              </div>
            `;
            uploadStatus.style.display = 'block';
          } finally {
            btn.disabled = false;
            btn.textContent = 'Upload CSV';
          }
        });
        
        // Helper function to read file as text
        function readFileAsText(file) {
          return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = event => resolve(event.target.result);
            reader.onerror = error => reject(error);
            reader.readAsText(file);
          });
        }
        
        // Global function to copy new venues CSV data
        window.copyNewVenuesData = function(csvData) {
          navigator.clipboard.writeText(csvData).then(() => {
            alert('New venues CSV data copied to clipboard! You can now paste this into your venues file.');
          }).catch(() => {
            // Fallback for older browsers
            const textarea = document.createElement('textarea');
            textarea.value = csvData;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            alert('New venues CSV data copied to clipboard! You can now paste this into your venues file.');
          });
        };
        
        // Auto-refresh every 30 seconds
        setTimeout(() => location.reload(), 30000);
      });
    </script>
  </body>
</html>